import { useState, useCallback, useMemo } from "react";
import { IDSInfo } from "../utils/xmlGeneration";
import { useTranslate } from "@tolgee/react";

interface MetadataFormData {
  title: string;
  version: string;
  description: string;
  author: string;
  copyright: string;
  purpose: string;
  milestone: string;
}

interface MetadataValidation {
  title: boolean;
  version: boolean;
  description: boolean;
  author: boolean;
  copyright: boolean;
  purpose: boolean;
  milestone: boolean;
}

interface UseMetadataManagerOptions {
  autoGenerateDate?: boolean;
  validateOnChange?: boolean;
  defaultVersion?: string;
}

interface UseMetadataManagerReturn {
  metadata: IDSInfo;
  formData: MetadataFormData;
  validation: MetadataValidation;
  updateMetadata: (field: keyof MetadataFormData, value: string) => void;
  updateAllMetadata: (data: Partial<MetadataFormData>) => void;
  resetMetadata: () => void;
  generateDefaultMetadata: () => void;
  isValid: boolean;
  hasRequiredFields: boolean;
  getMetadataForExport: () => IDSInfo;
}

export const useMetadataManager = (
  initialMetadata?: Partial<IDSInfo>,
  options: UseMetadataManagerOptions = {}
): UseMetadataManagerReturn => {
  const { t } = useTranslate();
  const { 
    autoGenerateDate = true, 
    validateOnChange = true, 
    defaultVersion = "1.0.0" 
  } = options;

  // Initialize form data from initial metadata
  const initializeFormData = useCallback((): MetadataFormData => {
    return {
      title: initialMetadata?.title || "",
      version: initialMetadata?.version || defaultVersion,
      description: initialMetadata?.description || "",
      author: initialMetadata?.author || "",
      copyright: initialMetadata?.copyright || "",
      purpose: initialMetadata?.purpose || "",
      milestone: initialMetadata?.milestone || "",
    };
  }, [initialMetadata, defaultVersion]);

  const [formData, setFormData] = useState<MetadataFormData>(initializeFormData);

  // Generate current date in ISO format
  const getCurrentDate = useCallback((): string => {
    return new Date().toISOString().split('T')[0]; // YYYY-MM-DD format
  }, []);

  // Convert form data to IDSInfo with current date
  const metadata: IDSInfo = useMemo(() => ({
    title: formData.title,
    version: formData.version,
    description: formData.description || undefined,
    author: formData.author || undefined,
    copyright: formData.copyright || undefined,
    purpose: formData.purpose || undefined,
    milestone: formData.milestone || undefined,
    date: autoGenerateDate ? getCurrentDate() : (initialMetadata?.date || getCurrentDate()),
  }), [formData, autoGenerateDate, getCurrentDate, initialMetadata?.date]);

  // Validation logic
  const validation: MetadataValidation = useMemo(() => ({
    title: formData.title.trim().length > 0,
    version: formData.version.trim().length > 0,
    description: true, // Optional field
    author: true, // Optional field
    copyright: true, // Optional field
    purpose: true, // Optional field
    milestone: true, // Optional field
  }), [formData]);

  // Update single metadata field
  const updateMetadata = useCallback((field: keyof MetadataFormData, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  }, []);

  // Update multiple metadata fields
  const updateAllMetadata = useCallback((data: Partial<MetadataFormData>) => {
    setFormData(prev => ({
      ...prev,
      ...data
    }));
  }, []);

  // Reset metadata to initial state
  const resetMetadata = useCallback(() => {
    setFormData(initializeFormData());
  }, [initializeFormData]);

  // Generate default metadata with suggested values
  const generateDefaultMetadata = useCallback(() => {
    const currentDate = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format
    
    setFormData({
      title: t("metadata.defaultTitle", "New IDS Specification"),
      version: defaultVersion,
      description: t("metadata.defaultDescription", "Generated IDS specification for building information validation"),
      author: "",
      copyright: `Â© ${new Date().getFullYear()}`,
      purpose: t("metadata.defaultPurpose", "Design validation"),
      milestone: t("metadata.defaultMilestone", "Planning"),
    });
  }, [t, defaultVersion]);

  // Check if all required fields are valid
  const hasRequiredFields = useMemo(() => {
    return validation.title && validation.version;
  }, [validation]);

  // Check if all fields are valid (required + optional)
  const isValid = useMemo(() => {
    return Object.values(validation).every(valid => valid);
  }, [validation]);

  // Get metadata formatted for export
  const getMetadataForExport = useCallback((): IDSInfo => {
    return {
      ...metadata,
      // Ensure required fields have fallback values
      title: metadata.title || t("metadata.untitledSpecification", "Untitled Specification"),
      version: metadata.version || "1.0.0",
      date: autoGenerateDate ? getCurrentDate() : metadata.date,
    };
  }, [metadata, t, autoGenerateDate, getCurrentDate]);

  return {
    metadata,
    formData,
    validation,
    updateMetadata,
    updateAllMetadata,
    resetMetadata,
    generateDefaultMetadata,
    isValid,
    hasRequiredFields,
    getMetadataForExport,
  };
};
